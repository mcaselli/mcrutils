% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_calendar.R
\name{set_cal}
\alias{set_cal}
\alias{set_calendar}
\alias{with_calendar}
\alias{local_calendar}
\title{Set the QuantLib Calendar}
\usage{
set_calendar(calendar)

with_calendar(new, code)

local_calendar(new = list(), .local_envir = parent.frame())
}
\arguments{
\item{calendar, new}{(character) A single QuantLib calendar id (the vector
\link[qlcal:calendars]{qlcal::calendars} lists all valid options).}

\item{code}{Code to execute in the temporary environment}

\item{.local_envir}{(environment) The environment to use for scoping}
}
\value{
\code{set_calendar()} returns invisibly the ID of the previously active
calendar.

All functions will error if an invalid calendar id is provided.
}
\description{
These functions wrap \code{\link[qlcal:setCalendar]{qlcal::setCalendar()}}. They validate that
the provided calendar is a valid QuantLib calendar, and only change the
calendar in the case that the validated id is different from the current
calendar.

\code{set_calendar()} changes the global calendar for the R session.
It invisibly returns the ID of the previously active calendar.

\code{with_calendar()} and \code{local_calendar()} allow you to temporarily set a
QuantLib calendar for the duration of an expression or evaluation context.
They behave like other \verb{with_*()} and \verb{local_*()} functions from
\href{https://withr.r-lib.org/articles/withr.html#local-functions-and-with-functions}{withr}
}
\examples{
library(qlcal)
isBusinessDay(as.Date("2024-07-04")) # Default calendar
with_calendar("UnitedStates", {
  # Code here will use the "UnitedStates" calendar
  isBusinessDay(as.Date("2024-07-04"))
})
isBusinessDay(as.Date("2024-07-04")) # Back to default calendar
}
\seealso{
\code{\link[qlcal:setCalendar]{qlcal::setCalendar()}}, \code{\link[qlcal:calendars]{qlcal::calendars()}}

Note that many functions in \code{mcrutils} that deal with business days
(e.g. \code{\link[=is_bizday]{is_bizday()}}, \code{\link[=bizday_of_period]{bizday_of_period()}}, \code{\link[=bizdays_between]{bizdays_between()}} etc.)
accept a \code{calendar} argument and make internal use of \code{local_calendar()}, so
you may not need to use these calendar setting functions directly.
}
