[{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mcaselli.github.io/mcrutils/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mcaselli.github.io/mcrutils/articles/mcrutils.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"mcrutils","text":"goal mcrutils provide grab-bag utility functions find useful R projects data cleaning, analysis, reporting, including creating visualizing year--date quarterly analyses, customer account status/churn analysis.","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/articles/mcrutils.html","id":"normalize-logical-columns","dir":"Articles","previous_headings":"Cleaning","what":"Normalize logical columns","title":"mcrutils","text":"data frames tibbles character factor columns storing logical data, may happen reading database, CSV, Excel file, use normalize_logicals() find convert columns logical type. nice one-liner dplyr pipe","code":"library(dplyr, warn.conflicts = FALSE) ugly_data <- tibble(   logical_char = c(\"T\", \"F\", \"T\"),   logical_factor = factor(c(\"TRUE\", \"FALSE\", \"TRUE\")),   non_logical_char = c(\"a\", \"b\", \"c\"),   non_logical_factor = factor(c(\"x\", \"y\", \"z\")),   mixed_char = c(\"T\", \"F\", \"a\"),   mixed_factor = factor(c(\"TRUE\", \"FALSE\", \"x\")),   numeric_col = c(1.1, 2.2, 3.3) )  ugly_data #> # A tibble: 3 × 7 #>   logical_char logical_factor non_logical_char non_logical_factor mixed_char #>   <chr>        <fct>          <chr>            <fct>              <chr>      #> 1 T            TRUE           a                x                  T          #> 2 F            FALSE          b                y                  F          #> 3 T            TRUE           c                z                  a          #> # ℹ 2 more variables: mixed_factor <fct>, numeric_col <dbl> df <- ugly_data |> normalize_logicals() #> Converted \"logical_char\" and \"logical_factor\" columns to #> logical. df #> # A tibble: 3 × 7 #>   logical_char logical_factor non_logical_char non_logical_factor mixed_char #>   <lgl>        <lgl>          <chr>            <fct>              <chr>      #> 1 TRUE         TRUE           a                x                  T          #> 2 FALSE        FALSE          b                y                  F          #> 3 TRUE         TRUE           c                z                  a          #> # ℹ 2 more variables: mixed_factor <fct>, numeric_col <dbl>"},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/articles/mcrutils.html","id":"customer-account-status-churn-and-retention","dir":"Articles","previous_headings":"Analysis","what":"Customer account status, churn, and retention","title":"mcrutils","text":"accounts_by_status() categorizes accounts statuses based order activity (active, new, returning, temporarily lost, regained terminally lost) time interval (monthly, weekly, quarterly, etc. supported). also produces running list cumulative accounts. useful understanding customer retention churn. data.frame returned accounts_by_status() quickly gets unwieldy print, see works, let’s make small example data set list 25 orders 10 accounts 6 months. accounts_by_status() splits order data time periods, returns accounts status category period list-column. want count accounts status category, set with_counts = TRUE (lists account_ids still included, just omit printed output ). Visualizing count accounts status time can helpful understand business terms customer retention churn. mcrutils includes larger example dataset example_sales 5000 orders accounts 2022–2024 time period. accounts_by_status() produces six status counts, plus one cumulative count– ’s seven data series plot, need thoughtful design choices. Showing lost accounts negative value helps de-clutter picture helps perception encoding values axis “good” “bad” (assuming don’t want lose customers). can use color help well (blues/greens: good, reds: bad).  plot_accounts_by_status() convenience function bit , cleaning legend, x-axis title, last order_date end final time period (example_sales, orders 2024-12-20), final period shown dashed lines indicate data may incomplete.  can suppress dashed lines incomplete periods force_final_period_complete = TRUE, exclude cumulative line include_cumulative = FALSE.","code":"set.seed(1234) n <- 25 dates <- seq(as.Date(\"2022-01-01\"), as.Date(\"2022-06-30\"), by = \"day\") orders <- data.frame(   account_id = sample(letters[1:10], n, replace = TRUE),   order_date = sample(dates, n, replace = TRUE) ) |> arrange(order_date)  orders |> glimpse() #> Rows: 25 #> Columns: 2 #> $ account_id <chr> \"h\", \"b\", \"b\", \"f\", \"d\", \"i\", \"e\", \"c\", \"d\", \"d\", \"j\", \"f\",… #> $ order_date <date> 2022-01-02, 2022-01-26, 2022-02-10, 2022-02-11, 2022-02-12… orders |> accounts_by_status(account_id, order_date, by = \"month\") #>   period_start period_end              active              new returning #> 1   2022-01-01 2022-01-31                b, h             b, h           #> 2   2022-02-01 2022-02-28 b, c, d, e, f, i, j c, d, e, f, i, j         b #> 3   2022-03-01 2022-03-31                d, f                       d, f #> 4   2022-04-01 2022-04-30          d, e, g, h                g         d #> 5   2022-05-01 2022-05-31             e, f, h                       e, h #> 6   2022-06-01 2022-06-30                f, j                          f #>   regained temporarily_lost terminally_lost                cumulative #> 1                                                                b, h #> 2                         h                    b, h, c, d, e, f, i, j #> 3                      e, j         b, c, i    b, h, c, d, e, f, i, j #> 4     e, h                f                 b, h, c, d, e, f, i, j, g #> 5        f                             d, g b, h, c, d, e, f, i, j, g #> 6        j                             e, h b, h, c, d, e, f, i, j, g orders |>   accounts_by_status(account_id, order_date, by = \"month\", with_counts = TRUE) |>   select(period_start, starts_with(\"n_\")) #>   period_start n_active n_new n_returning n_regained n_temporarily_lost #> 1   2022-01-01        2     2           0          0                  0 #> 2   2022-02-01        7     6           1          0                  1 #> 3   2022-03-01        2     0           2          0                  2 #> 4   2022-04-01        4     1           1          2                  1 #> 5   2022-05-01        3     0           2          1                  0 #> 6   2022-06-01        2     0           1          1                  0 #>   n_terminally_lost n_cumulative #> 1                 0            2 #> 2                 0            8 #> 3                 3            8 #> 4                 0            9 #> 5                 2            9 #> 6                 2            9 example_sales |> glimpse() #> Rows: 5,317 #> Columns: 4 #> $ account_id    <chr> \"l_10\", \"l_11\", \"l_20\", \"l_9\", \"l_1\", \"l_1\", \"l_18\", \"l_… #> $ market        <chr> \"Germany\", \"Germany\", \"United States\", \"United States\", … #> $ order_date    <date> 2022-01-02, 2022-01-03, 2022-01-03, 2022-01-03, 2022-01… #> $ units_ordered <dbl> 1, 4, 2, 1, 3, 2, 2, 2, 1, 2, 3, 2, 2, 2, 2, 4, 4, 3, 1,… library(ggplot2) library(dplyr, warn.conflicts = FALSE) library(tidyr)  example_sales |>   accounts_by_status(account_id, order_date, with_counts = TRUE, by = \"quarter\") |>   select(period_start, starts_with(\"n_\")) |>   # negate the lost counts for visualization   mutate(across(contains(\"lost\"), ~ -.x)) |>   # pivot to prepare for ggplot   pivot_longer(starts_with(\"n_\"), names_to = \"status\", values_to = \"count\") |>   mutate(status = stringr::str_remove(status, \"n_\")) |>   ggplot(aes(period_start, count, color = status)) +   geom_line(linewidth = 1.2) +   scale_color_manual(values = c(     \"active\" = \"#1f78b4\",     \"new\" = \"#33a02c\",     \"returning\" = \"#a6cee3\",     \"temporarily_lost\" = \"#fb9a99\",     \"terminally_lost\" = \"#e31a1c\",     \"regained\" = \"#b2df8a\",     \"cumulative\" = \"#999999\"   )) +   theme_minimal() example_sales |>   plot_accounts_by_status(account_id, order_date, by = \"quarter\") example_sales |>   plot_accounts_by_status(     account_id, order_date,     by = \"quarter\",     force_final_period_complete = TRUE,     include_cumulative = FALSE   )"},{"path":"https://mcaselli.github.io/mcrutils/articles/mcrutils.html","id":"business-day-evaluation","dir":"Articles","previous_headings":"Analysis","what":"Business day evaluation","title":"mcrutils","text":"mcrutils provides several functions working business days, including is_bizday(), adjust_to_bizday(), bizdays_between(), periodic_bizdays(), bizday_of_period(). functions use calendars QuantLib working/non-working day definitions, based qlcal package. fact, exception periodic_bizdays(), corresponding functions qlcal. motivation mcrutils versions facilitate frequent changes configured QuantLib calendar without making persistent changes globally configured calendar,.e. functions contain calendar change functional scope. functionality leverages withr. mcrutils also provides with_calendar() local_calendar() functions can leverage side-effect encapsulation qlcal use cases.","code":""},{"path":"https://mcaselli.github.io/mcrutils/articles/mcrutils.html","id":"business-days-in-periodic-intervals","dir":"Articles","previous_headings":"Analysis","what":"Business days in periodic intervals","title":"mcrutils","text":"periodic_bizdays() calculates number business days periodic interval (e.g., monthly, quarterly) two dates, using calendars QuantLib holiday definitions.","code":"periodic_bizdays(   from = \"2025-01-01\",   to = \"2025-12-31\",   by = \"quarter\",   quantlib_calendars = c(\"UnitedStates\", \"UnitedKingdom\") ) #> # A tibble: 8 × 4 #>   calendar      start      end        business_days #>   <chr>         <date>     <date>             <int> #> 1 UnitedStates  2025-01-01 2025-03-31            61 #> 2 UnitedStates  2025-04-01 2025-06-30            63 #> 3 UnitedStates  2025-07-01 2025-09-30            64 #> 4 UnitedStates  2025-10-01 2025-12-31            62 #> 5 UnitedKingdom 2025-01-01 2025-03-31            63 #> 6 UnitedKingdom 2025-04-01 2025-06-30            61 #> 7 UnitedKingdom 2025-07-01 2025-09-30            65 #> 8 UnitedKingdom 2025-10-01 2025-12-31            64"},{"path":"https://mcaselli.github.io/mcrutils/articles/mcrutils.html","id":"cumulative-daily-sales-by-business-day-of-period","dir":"Articles","previous_headings":"Analysis","what":"Cumulative daily sales by business day of period","title":"mcrutils","text":"bizday_of_period() calculates business day period (month, quarter, year) given date calendar e.g. date x 3rd business day month. can helpful creating apples--apples “burn-” chart showing cumulative orders, revenue, etc period vs. similar period prior year. multiple records per day, ’s generally faster create lookup table date business day period, join data frame. Using example_sales dataset, first add column QuantLib calendar used order (case market column close, just need eliminate space “United States”). Now can make lookup table covering years markets data set. Now can join lookup table sales data. Let’s imagine ’s mid-November 2024, want see orders tracking prior year. First group year business day month, calculate daily units ordered cumulative sum units ordered Now can construct cumulative daily sales chart comparing 2024 prior years.  can look -market well, just need add another grouping variable market, facet plot.","code":"library(dplyr, warn.conflicts = FALSE) library(lubridate, warn.conflicts = FALSE) library(purrr) library(stringr)  sales <- example_sales |>   mutate(calendar = str_replace_all(market, \" \", \"\"))  head(sales) #> # A tibble: 6 × 5 #>   account_id market        order_date units_ordered calendar     #>   <chr>      <chr>         <date>             <dbl> <chr>        #> 1 l_10       Germany       2022-01-02             1 Germany      #> 2 l_11       Germany       2022-01-03             4 Germany      #> 3 l_20       United States 2022-01-03             2 UnitedStates #> 4 l_9        United States 2022-01-03             1 UnitedStates #> 5 l_1        Germany       2022-01-04             3 Germany      #> 6 l_1        Germany       2022-01-04             2 Germany bizday_lookup <- tibble(   # make a row for each date in the years spanned by the sales data   date = seq(     from = lubridate::floor_date(min(sales$order_date), \"month\"),     to = lubridate::ceiling_date(max(sales$order_date), \"month\") - 1,     by = \"day\"   ) ) |>   # cross with each calendar   tidyr::expand_grid(calendar = unique(sales$calendar)) |>   mutate(     adjusted_date = purrr::map2_vec(       .data$date, .data$calendar,       \\(date, calendar) adjust_to_bizday(date, calendar)     ),     # calculate the business day of month for each date in each market     bizday_of_month = purrr::pmap_int(       list(adjusted_date, .data$calendar),       \\(date, calendar) {         bizday_of_period(date, calendar, period = \"month\")       }     ),     # and again for the business day of quarter     bizday_of_quarter = purrr::pmap_int(       list(adjusted_date, .data$calendar),       \\(date, calendar) {         bizday_of_period(date, calendar, period = \"quarter\")       }     )   )  # peek at the result bizday_lookup |>   filter(date >= ymd(\"2023-07-02\")) |> # starting on a Sunday in July   head() #> # A tibble: 6 × 5 #>   date       calendar     adjusted_date bizday_of_month bizday_of_quarter #>   <date>     <chr>        <date>                  <int>             <int> #> 1 2023-07-02 Germany      2023-07-03                  1                 1 #> 2 2023-07-02 UnitedStates 2023-07-03                  1                 1 #> 3 2023-07-03 Germany      2023-07-03                  1                 1 #> 4 2023-07-03 UnitedStates 2023-07-03                  1                 1 #> 5 2023-07-04 Germany      2023-07-04                  2                 2 #> 6 2023-07-04 UnitedStates 2023-07-05                  2                 2 sales_with_bizday <- sales |>   left_join(bizday_lookup, by = c(\"order_date\" = \"date\", \"calendar\" = \"calendar\")) head(sales_with_bizday) #> # A tibble: 6 × 8 #>   account_id market        order_date units_ordered calendar     adjusted_date #>   <chr>      <chr>         <date>             <dbl> <chr>        <date>        #> 1 l_10       Germany       2022-01-02             1 Germany      2022-01-03    #> 2 l_11       Germany       2022-01-03             4 Germany      2022-01-03    #> 3 l_20       United States 2022-01-03             2 UnitedStates 2022-01-03    #> 4 l_9        United States 2022-01-03             1 UnitedStates 2022-01-03    #> 5 l_1        Germany       2022-01-04             3 Germany      2022-01-04    #> 6 l_1        Germany       2022-01-04             2 Germany      2022-01-04    #> # ℹ 2 more variables: bizday_of_month <int>, bizday_of_quarter <int> global_cum_daily_sales <- sales_with_bizday |>   filter(order_date < ymd(\"2024-11-18\")) |>   filter(month(adjusted_date) == 11) |>   group_by(year = year(adjusted_date), bizday_of_month) |>   summarise(units_ordered = sum(units_ordered), .groups = \"drop\") |>   group_by(year) |>   mutate(cumulative_units_ordered = cumsum(units_ordered))   head(global_cum_daily_sales) #> # A tibble: 6 × 4 #> # Groups:   year [1] #>    year bizday_of_month units_ordered cumulative_units_ordered #>   <dbl>           <int>         <dbl>                    <dbl> #> 1  2022               1            24                       24 #> 2  2022               2            10                       34 #> 3  2022               3            15                       49 #> 4  2022               4            15                       64 #> 5  2022               5            19                       83 #> 6  2022               6             8                       91 global_cum_daily_sales |>   ggplot(aes(bizday_of_month, cumulative_units_ordered, color = factor(year))) +   geom_line(linewidth = 1.2) +   labs(     title = \"Cumulative Units Ordered by Business Day of Month\",     color = \"Year\"   ) +   theme_minimal() regional_cum_daily_sales <- sales_with_bizday |>   filter(order_date < ymd(\"2024-11-18\")) |>   filter(month(order_date) == 11) |>   group_by(year = year(order_date), bizday_of_month, market) |>   summarise(units_ordered = sum(units_ordered), .groups = \"drop\") |>   group_by(year, market) |>   mutate(cumulative_units_ordered = cumsum(units_ordered))   head(regional_cum_daily_sales) #> # A tibble: 6 × 5 #> # Groups:   year, market [2] #>    year bizday_of_month market        units_ordered cumulative_units_ordered #>   <dbl>           <int> <chr>                 <dbl>                    <dbl> #> 1  2022               1 Germany                   7                        7 #> 2  2022               1 United States            17                       17 #> 3  2022               2 Germany                   3                       10 #> 4  2022               2 United States             7                       24 #> 5  2022               3 Germany                   2                       12 #> 6  2022               3 United States            13                       37 regional_cum_daily_sales |>   ggplot(aes(bizday_of_month, cumulative_units_ordered, color = factor(year))) +   geom_line(linewidth = 1.2) +   facet_wrap(~market, ncol=1) +   labs(     title = \"Cumulative Units Ordered by Business Day of Month\",     color = \"Year\"   ) +   theme_minimal()"},{"path":"https://mcaselli.github.io/mcrutils/articles/mcrutils.html","id":"year-to-date-helpers","dir":"Articles","previous_headings":"Analysis","what":"Year-to-date helpers","title":"mcrutils","text":"mcrutils provides handful functions can helpful creating year--date analyses 2.5 years historical sales data ending June 1, 2025. ytd_bounds() gets start end year--date period latest year vector dates, is_ytd_comparable() logical vector indicates whether dates vector within year--date period relative given end_date. can quickly filter historical data see ’re 2025 compared period (.e. January - June) 2023 2024: py_dates() can rollback vector dates period previous year, moving fictitious dates prior valid day.","code":"set.seed(123) sales <- tibble(   date = seq(     from = as.Date(\"2023-01-01\"),     to = as.Date(\"2025-06-01\"),     by = \"month\"   ),   amount = rpois(30, lambda = 100) )  head(sales) #> # A tibble: 6 × 2 #>   date       amount #>   <date>      <int> #> 1 2023-01-01     94 #> 2 2023-02-01    111 #> 3 2023-03-01     83 #> 4 2023-04-01    101 #> 5 2023-05-01    117 #> 6 2023-06-01    104 (bounds <- ytd_bounds(sales$date)) #> [1] \"2025-01-01\" \"2025-06-01\" sales |>   filter(is_ytd_comparable(date, max(bounds))) |>   group_by(year = lubridate::year(date)) |>   summarise(ytd_sales = sum(amount)) #> # A tibble: 3 × 2 #>    year ytd_sales #>   <dbl>     <int> #> 1  2023       610 #> 2  2024       594 #> 3  2025       600 c(\"2024-01-01\", \"2024-02-29\", \"2025-07-15\") |>   as.Date() |>   py_dates() #> [1] \"2023-01-01\" \"2023-02-28\" \"2024-07-15\""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/articles/mcrutils.html","id":"auto-formatted-datattables","dir":"Articles","previous_headings":"Visualization","what":"Auto-formatted datattables","title":"mcrutils","text":"auto_dt() uses guess_col_fmts() determine format column. can provide pct_flags curr_flags (character vectors) need control list “signal” words indicate column percentage currency. can suppress buttons copy, csv, excel downloads buttons = FALSE.","code":"tribble(   ~product, ~weight, ~dollaz_earned, ~growth_pct,   \"Widget A\", 13.53, 1023.21, 0.051,   \"Widget B\", 22.61, 150.24, 0.103,   \"Widget C\", 40.54, 502.26, 0.021,   \"Widget D\", 34.21, 2000.95, 0.154 ) |>   mutate(product = as.factor(product)) |>   auto_dt(numeric_digits = 1, pct_digits = 0, curr_flags = c(\"revenue\", \"dollaz\"))"},{"path":"https://mcaselli.github.io/mcrutils/articles/mcrutils.html","id":"quarterly-breaks-and-labels","dir":"Articles","previous_headings":"Visualization","what":"Quarterly breaks and labels","title":"mcrutils","text":"scales::label_date_short() great function labeling dates ggplot2, unfortunately can’t support quarterly breaks labels box. mcrutils provides set functions create quarterly breaks labels date scales ggplot2. breaks_quarters() function generates breaks quarters, label_quarters_short() generates minimal labels breaks two-line format (like scales::label_date_short()), labeling every quarter, including year changes previous label.  automatic version breaks_quarters() tries return reasonable number breaks wide range dates, -sampling semesters years needed.   long date ranges like , likely better switching quarterly functions standard date breaks labels ggplot2. can force fixed break width quarters desired regardless date range.","code":"library(ggplot2)  economics |>   filter(date >= \"2005-05-01\", date <= \"2007-03-01\") |>   ggplot(aes(date, pce)) +   geom_line() +   scale_x_date(     breaks = breaks_quarters(),     labels = label_quarters_short()   ) +   labs(     title = \"Automatic Quarterly Breaks\",     subtitle = \"with concise labels\"   ) +   theme(panel.grid.minor.x = element_blank()) economics |>   filter(date >= \"2005-05-01\", date <= \"2009-03-01\") |>   ggplot(aes(date, pce)) +   geom_line() +   scale_x_date(     breaks = breaks_quarters(),     labels = label_quarters_short()   ) +   labs(     title = \"Switching to semesters for longer ranges\",     subtitle = \"always labelling Q1/Q3, never Q2/Q4\"   ) +   theme(panel.grid.minor.x = element_blank()) economics |>   filter(date >= \"2000-05-01\", date <= \"2010-03-01\") |>   ggplot(aes(date, pce)) +   geom_line() +   scale_x_date(     breaks = breaks_quarters(),     labels = label_quarters_short()   ) +   labs(     title = \"Switching to yearly for very long ranges\",     subtitle = \"rather silly\"   ) +   theme(panel.grid.minor.x = element_blank()) example_sales |>   plot_accounts_by_status(account_id, order_date, by = \"quarter\") +   scale_x_date(     breaks = breaks_quarters(width = \"1 quarter\"),     labels = label_quarters_short()   ) +   theme(panel.grid.minor.x = element_blank())"},{"path":"https://mcaselli.github.io/mcrutils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Caselli. Author, maintainer.","code":""},{"path":"https://mcaselli.github.io/mcrutils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Caselli M (2025). mcrutils: Miscellaneous Utilities Data Cleaning, Analysis, Reporting. R package version 0.0.0.9008, https://github.com/mcaselli/mcrutils.","code":"@Manual{,   title = {mcrutils: Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting},   author = {Michael Caselli},   year = {2025},   note = {R package version 0.0.0.9008},   url = {https://github.com/mcaselli/mcrutils}, }"},{"path":"https://mcaselli.github.io/mcrutils/index.html","id":"mcrutils","dir":"","previous_headings":"","what":"Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting","title":"Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting","text":"goal mcrutils provide grab-bag utility functions find useful R projects data cleaning, analysis, reporting, including creating visualizing year--date quarterly analyses, customer account status/churn analysis.","code":""},{"path":"https://mcaselli.github.io/mcrutils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting","text":"can install development version mcrutils GitHub :","code":"# install.packages(\"pak\") pak::pak(\"mcaselli/mcrutils\")"},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/index.html","id":"data-cleaning","dir":"","previous_headings":"Examples","what":"Data cleaning","title":"Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting","text":"data frames tibbles character factor columns storing logical data, may happen reading database, CSV, Excel file, use normalize_logicals() find convert columns logical type. nice one-liner dplyr pipe","code":"library(mcrutils) library(dplyr, warn.conflicts = FALSE)  ugly_data <- tibble(   logical_char = c(\"T\", \"F\", \"T\"),   logical_factor = factor(c(\"TRUE\", \"FALSE\", \"TRUE\")),   non_logical_char = c(\"a\", \"b\", \"c\"),   non_logical_factor = factor(c(\"x\", \"y\", \"z\")),   mixed_char = c(\"T\", \"F\", \"a\"),   mixed_factor = factor(c(\"TRUE\", \"FALSE\", \"x\")),   numeric_col = c(1.1, 2.2, 3.3) )   ugly_data |> normalize_logicals() #> Converted \"logical_char\" and \"logical_factor\" columns to logical. #> # A tibble: 3 × 7 #>   logical_char logical_factor non_logical_char non_logical_factor mixed_char #>   <lgl>        <lgl>          <chr>            <fct>              <chr>      #> 1 TRUE         TRUE           a                x                  T          #> 2 FALSE        FALSE          b                y                  F          #> 3 TRUE         TRUE           c                z                  a          #> # ℹ 2 more variables: mixed_factor <fct>, numeric_col <dbl>"},{"path":"https://mcaselli.github.io/mcrutils/index.html","id":"customer-account-statuschurn","dir":"","previous_headings":"Examples","what":"Customer account status/churn","title":"Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting","text":"accounts_by_status() takes order data (account IDs order dates) categorizes accounts different statuses (new, returning, temporarily lost, regained, terminally lost) based order behavior time interval (months, weeks, quarters, etc supported). also produces running list cumulative accounts. function useful understanding customer retention churn. (counts accounts status category can included well; set with_counts = TRUE). plot_accounts_by_status() creates line plot count account status time.","code":"set.seed(1234) n <- 25 dates <- seq(as.Date(\"2022-01-01\"), as.Date(\"2022-06-30\"), by = \"day\") orders <- data.frame(   account_id = sample(letters[1:10], n, replace = TRUE),   order_date = sample(dates, n, replace = TRUE) )  orders |> accounts_by_status(account_id, order_date) #>   period_start period_end              active              new returning #> 1   2022-01-01 2022-01-31                b, h             b, h           #> 2   2022-02-01 2022-02-28 b, c, d, e, f, i, j c, d, e, f, i, j         b #> 3   2022-03-01 2022-03-31                d, f                       d, f #> 4   2022-04-01 2022-04-30          d, e, g, h                g         d #> 5   2022-05-01 2022-05-31             e, f, h                       e, h #> 6   2022-06-01 2022-06-30                f, j                          f #>   regained temporarily_lost terminally_lost                cumulative #> 1                                                                b, h #> 2                         h                    b, h, c, d, e, f, i, j #> 3                      e, j         b, c, i    b, h, c, d, e, f, i, j #> 4     e, h                f                 b, h, c, d, e, f, i, j, g #> 5        f                             d, g b, h, c, d, e, f, i, j, g #> 6        j                             e, h b, h, c, d, e, f, i, j, g orders |>   plot_accounts_by_status(account_id, order_date)"},{"path":"https://mcaselli.github.io/mcrutils/index.html","id":"business-days","dir":"","previous_headings":"Examples","what":"Business days","title":"Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting","text":"periodic_bizdays() calculates number business days periodic interval (e.g., monthly, quarterly) two dates, using calendars QuantLib (see R package qlcal) holiday definitions. handy analyzing data summarized month quarter want adjust business days period. bizday_of_period() calculates business day period (month, quarter, year) given date calendar. useful creating cumulative “burn-” chart tracking mid-period progress e.g. prior year (See vignette(“mcrutils”) example).","code":"periodic_bizdays(   from = \"2025-01-01\",   to = \"2025-12-31\",   by = \"quarter\",   quantlib_calendars = c(\"UnitedStates\", \"UnitedKingdom\") ) #> # A tibble: 8 × 4 #>   calendar      start      end        business_days #>   <chr>         <date>     <date>             <int> #> 1 UnitedStates  2025-01-01 2025-03-31            61 #> 2 UnitedStates  2025-04-01 2025-06-30            63 #> 3 UnitedStates  2025-07-01 2025-09-30            64 #> 4 UnitedStates  2025-10-01 2025-12-31            62 #> 5 UnitedKingdom 2025-01-01 2025-03-31            63 #> 6 UnitedKingdom 2025-04-01 2025-06-30            61 #> 7 UnitedKingdom 2025-07-01 2025-09-30            65 #> 8 UnitedKingdom 2025-10-01 2025-12-31            64 bizday_of_period(as.Date(\"2025-06-17\"), \"UnitedStates\", period = \"month\") #> [1] 12 bizday_of_period(as.Date(\"2025-06-17\"), \"UnitedStates\", period = \"year\") #> [1] 116"},{"path":"https://mcaselli.github.io/mcrutils/index.html","id":"year-to-date-helpers","dir":"","previous_headings":"Examples","what":"Year-to-date helpers","title":"Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting","text":"mcrutils provides handful functions can helpful creating year--date analyses 2.5 years historical sales data ending June 1, 2025. ytd_bounds() gets start end year--date period latest year vector dates, is_ytd_comparable() logical vector indicates whether dates vector within year--date period relative given end_date. can quickly filter historical data see ’re 2025 compared period (.e. January - June) 2023 2024:","code":"set.seed(123) sales <- tibble(   date = seq(     from = as.Date(\"2023-01-01\"),     to = as.Date(\"2025-06-01\"),     by = \"month\"   ),   amount = rpois(30, lambda = 100) )  head(sales) #> # A tibble: 6 × 2 #>   date       amount #>   <date>      <int> #> 1 2023-01-01     94 #> 2 2023-02-01    111 #> 3 2023-03-01     83 #> 4 2023-04-01    101 #> 5 2023-05-01    117 #> 6 2023-06-01    104 (bounds <- ytd_bounds(sales$date)) #> [1] \"2025-01-01\" \"2025-06-01\" sales |>   filter(is_ytd_comparable(date, max(bounds))) |>   group_by(year = lubridate::year(date)) |>   summarise(ytd_sales = sum(amount)) #> # A tibble: 3 × 2 #>    year ytd_sales #>   <dbl>     <int> #> 1  2023       610 #> 2  2024       594 #> 3  2025       600"},{"path":"https://mcaselli.github.io/mcrutils/index.html","id":"one-line-datatables","dir":"","previous_headings":"Examples","what":"one-line datatables","title":"Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting","text":"auto_dt() one-line function creates DT::datatable object data frame tibble. includes buttons copy download data, filter tools, rownames. applies percent, currency, round formatting numeric columns, guessing correct format data type column names. See vignette(\"mcrutils\") examples, including specify set strings flag column percentage currency. auto_dt() output","code":"tribble(   ~product, ~weight, ~revenue, ~growth_pct,   \"Widget A\", 13.53, 1023.21, 0.051,   \"Widget B\", 22.61, 150.24, 0.103,   \"Widget C\", 40.54, 502.26, 0.021,   \"Widget D\", 34.21, 2000.95, 0.154 ) |>   mutate(product = as.factor(product)) |>   auto_dt(numeric_digits = 1, pct_digits = 0)"},{"path":"https://mcaselli.github.io/mcrutils/index.html","id":"quarterly-breaks-and-labels","dir":"","previous_headings":"Examples","what":"Quarterly breaks and labels","title":"Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting","text":"scales::label_date_short() great function labeling dates ggplot2, unfortunately can’t support quarterly breaks labels box. label_quarters_short() generates similar labels quarterly date breaks, labeling every quarter, including year changes previous label. breaks_quarters() generates quarterly breaks date scales.  default, breaks_quarters() tries return reasonable number breaks wide range dates, -sampling semesters years needed. See vignette(\"mcrutils\") examples.","code":"library(ggplot2)  economics |>   filter(date >= \"2005-05-01\", date <= \"2007-03-01\") |>   ggplot(aes(date, pce)) +   geom_line() +   scale_x_date(     breaks = breaks_quarters(),     labels = label_quarters_short()   )"},{"path":"https://mcaselli.github.io/mcrutils/reference/accounts_by_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute history of account activity status over time periods — accounts_by_status","title":"Compute history of account activity status over time periods — accounts_by_status","text":"function categorizes accounts different statuses (new, returning, temporarily lost, regained, terminally lost cumulative) based order behavior time period. useful understanding customer retention churn. Counts accounts status category can included setting with_counts = TRUE.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/accounts_by_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute history of account activity status over time periods — accounts_by_status","text":"","code":"accounts_by_status(   data,   account_id,   order_date,   by = \"month\",   with_counts = FALSE )"},{"path":"https://mcaselli.github.io/mcrutils/reference/accounts_by_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute history of account activity status over time periods — accounts_by_status","text":"data data frame tibble order information containing least account IDs order dates account_id, order_date <data-masked> columns data corresponding account identifier order dates, erspectively time period resolution. Defaults \"month\", anything supported unit argument lubridate::floor_date seq.Date option, e.g. \"week\", \"quarter\", \"2 months\" etc. with_counts Logical, TRUE, include counts accounts status category","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/accounts_by_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute history of account activity status over time periods — accounts_by_status","text":"data frame columns period start end dates, lists account IDs status category, optionally counts accounts category function returns data frame following columns: period_start (date): start date period. period_end (date) : end date period. active (list character): Accounts orders current period. new (list character): Accounts first-ever order current period. returning (list character): Accounts orders current prior periods. temporarily_lost (list character): Accounts orders prior period current period, yet orders future periods. terminally_lost (list character): Accounts orders prior period current period, orders future periods. regained (list character): Accounts orders current period, orders prior period, orders earlier periods. .e. account comes back \"temporarily lost\" cumulative (list character): accounts ever order including current period. with_counts TRUE, additional columns included: n_active (int): Count active accounts current period. n_new (int): Count new accounts current period. n_returning (int): Count returning accounts current period. n_temporarily_lost (int): Count temporarily lost accounts current period. n_terminally_lost (int): Count terminally lost accounts current period. n_regained (int): Count regained accounts current period. n_cumulative (int): Count accounts ever order including current period.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/accounts_by_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute history of account activity status over time periods — accounts_by_status","text":"","code":"set.seed(1234) n <- 50 dates <- seq(as.Date(\"2022-01-01\"), as.Date(\"2022-12-31\"), by = \"day\") orders <- data.frame(   account_id = sample(letters[1:10], n, replace = TRUE),   order_date = sample(dates, n, replace = TRUE) )  orders |> accounts_by_status(account_id, order_date, with_counts = TRUE) #>    period_start period_end              active     new returning regained #> 1    2022-01-01 2022-01-31             e, f, i e, f, i                    #> 2    2022-02-01 2022-02-28                c, g    c, g                    #> 3    2022-03-01 2022-03-31 a, c, d, e, f, i, j a, d, j         c  e, f, i #> 4    2022-04-01 2022-04-30             a, e, f           a, e, f          #> 5    2022-05-01 2022-05-31          a, d, f, h       h      a, f        d #> 6    2022-06-01 2022-06-30          a, d, h, j           a, d, h        j #> 7    2022-07-01 2022-07-31                   f                          f #> 8    2022-08-01 2022-08-31          d, f, h, j                 f  d, h, j #> 9    2022-09-01 2022-09-30             d, e, j              d, j        e #> 10   2022-10-01 2022-10-31          c, e, g, i                 e  c, g, i #> 11   2022-11-01 2022-11-30             b, c, h       b         c        h #> 12   2022-12-01 2022-12-31                b, f                 b        f #>    temporarily_lost terminally_lost                   cumulative n_active n_new #> 1                                                        e, f, i        3     3 #> 2           e, f, i                                e, f, i, c, g        2     2 #> 3                 g                       e, f, i, c, g, a, d, j        7     3 #> 4        c, d, i, j                       e, f, i, c, g, a, d, j        3     0 #> 5                 e                    e, f, i, c, g, a, d, j, h        4     1 #> 6                 f                    e, f, i, c, g, a, d, j, h        4     0 #> 7           d, h, j               a    e, f, i, c, g, a, d, j, h        1     0 #> 8                                      e, f, i, c, g, a, d, j, h        4     0 #> 9              f, h                    e, f, i, c, g, a, d, j, h        3     0 #> 10                             d, j    e, f, i, c, g, a, d, j, h        4     0 #> 11                          e, g, i e, f, i, c, g, a, d, j, h, b        3     1 #> 12                             c, h e, f, i, c, g, a, d, j, h, b        2     0 #>    n_returning n_regained n_temporarily_lost n_terminally_lost n_cumulative #> 1            0          0                  0                 0            3 #> 2            0          0                  3                 0            5 #> 3            1          3                  1                 0            8 #> 4            3          0                  4                 0            8 #> 5            2          1                  1                 0            9 #> 6            3          1                  1                 0            9 #> 7            0          1                  3                 1            9 #> 8            1          3                  0                 0            9 #> 9            2          1                  2                 0            9 #> 10           1          3                  0                 2            9 #> 11           1          1                  0                 3           10 #> 12           1          1                  0                 2           10"},{"path":"https://mcaselli.github.io/mcrutils/reference/active_accounts_in_range.html","id":null,"dir":"Reference","previous_headings":"","what":"List active accounts in a date range — active_accounts_in_range","title":"List active accounts in a date range — active_accounts_in_range","text":"List active accounts date range","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/active_accounts_in_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List active accounts in a date range — active_accounts_in_range","text":"","code":"active_accounts_in_range(data, account_id, order_date, start_date, end_date)"},{"path":"https://mcaselli.github.io/mcrutils/reference/active_accounts_in_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List active accounts in a date range — active_accounts_in_range","text":"data data frame tibble order information containing least account IDs order dates account_id, order_date <data-masked> columns data corresponding account identifier order dates, erspectively start_date, end_date start date end_date range (inclusive)","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/active_accounts_in_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List active accounts in a date range — active_accounts_in_range","text":"vector unique account IDs active specified date range","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/adjust_to_bizday.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust any non-working days to the following business day in a given calendar — adjust_to_bizday","title":"Adjust any non-working days to the following business day in a given calendar — adjust_to_bizday","text":"Adjust non-working days following business day given calendar","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/adjust_to_bizday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust any non-working days to the following business day in a given calendar — adjust_to_bizday","text":"","code":"adjust_to_bizday(date, calendar)"},{"path":"https://mcaselli.github.io/mcrutils/reference/adjust_to_bizday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust any non-working days to the following business day in a given calendar — adjust_to_bizday","text":"date vector dates (Date object coercible .Date()). calendar (character) QuantLib calendar id (vector qlcal::calendars lists valid options).","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/adjust_to_bizday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust any non-working days to the following business day in a given calendar — adjust_to_bizday","text":"vector Date objects, length date, non-working dates adjusted following business day specified calendar. Working days left unchanged.","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/reference/adjust_to_bizday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust any non-working days to the following business day in a given calendar — adjust_to_bizday","text":"","code":"# July 4 is a US holiday, but not a UK holiday adjust_to_bizday(c(\"2025-07-03\", \"2025-07-04\"), \"UnitedStates\") #> [1] \"2025-07-03\" \"2025-07-07\" adjust_to_bizday(c(\"2025-07-03\", \"2024-07-04\"), \"UnitedKingdom\") #> [1] \"2025-07-03\" \"2024-07-04\""},{"path":"https://mcaselli.github.io/mcrutils/reference/auto_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"creates a datatable with some automatic formatting — auto_dt","title":"creates a datatable with some automatic formatting — auto_dt","text":"function creates datatable automatic formatting percentage, currency, numeric columns, using guess_col_fmts() determine columns percentages, currency, numeric.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/auto_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"creates a datatable with some automatic formatting — auto_dt","text":"","code":"auto_dt(   data,   pct_digits = 1,   currency_digits = 0,   numeric_digits = 0,   buttons = TRUE,   ... )"},{"path":"https://mcaselli.github.io/mcrutils/reference/auto_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"creates a datatable with some automatic formatting — auto_dt","text":"data data frame displayed datatable pct_digits number digits display percentage columns currency_digits number digits display currency columns numeric_digits number digits display numeric columns buttons logical, TRUE include buttons copy, csv, excel downloads ... additional arguments passed guess_col_fmts()","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/auto_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"creates a datatable with some automatic formatting — auto_dt","text":"datatable formatted columns, filter top, rownames","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/bizday_of_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the business day of the period for a given date and calendar — bizday_of_period","title":"Find the business day of the period for a given date and calendar — bizday_of_period","text":"Convenience wrapper around qlcal::businessDaysBetween() calculates business day date month, quarter, year, first business day ofthe period 1, second 2, etc. uses specified QuantLib calendar holiday definitions.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/bizday_of_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the business day of the period for a given date and calendar — bizday_of_period","text":"","code":"bizday_of_period(date, calendar, period = c(\"month\", \"quarter\", \"year\"))"},{"path":"https://mcaselli.github.io/mcrutils/reference/bizday_of_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the business day of the period for a given date and calendar — bizday_of_period","text":"date vector dates (Date object coercible .Date()). calendar (character) QuantLib calendar id (vector qlcal::calendars lists valid options). period period type: \"month\", \"quarter\", \"year\"","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/bizday_of_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the business day of the period for a given date and calendar — bizday_of_period","text":"integer representing business day period given date calendar.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/bizday_of_period.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the business day of the period for a given date and calendar — bizday_of_period","text":"NOTE: ensure predictable, intuitive results, input dates generally pre-adjusted business days using transparent deterministic method like adjust_to_bizday(), qlcal::adjust() similar, adjustment may cause date shift one period another, e.g. adjustment weekend/holiday next business day may cause date shift next month.","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/reference/bizday_of_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the business day of the period for a given date and calendar — bizday_of_period","text":"","code":"# valid calendars qlcal::calendars #>  [1] \"TARGET\"                         \"UnitedStates\"                   #>  [3] \"UnitedStates/LiborImpact\"       \"UnitedStates/NYSE\"              #>  [5] \"UnitedStates/GovernmentBond\"    \"UnitedStates/NERC\"              #>  [7] \"UnitedStates/FederalReserve\"    \"UnitedStates/SOFR\"              #>  [9] \"Argentina\"                      \"Australia\"                      #> [11] \"Australia/ASX\"                  \"Austria\"                        #> [13] \"Austria/Exchange\"               \"Bespoke\"                        #> [15] \"Botswana\"                       \"Brazil\"                         #> [17] \"Brazil/Exchange\"                \"Canada\"                         #> [19] \"Canada/TSX\"                     \"Chile\"                          #> [21] \"China\"                          \"China/IB\"                       #> [23] \"CzechRepublic\"                  \"Denmark\"                        #> [25] \"Finland\"                        \"France\"                         #> [27] \"France/Exchange\"                \"Germany\"                        #> [29] \"Germany/FrankfurtStockExchange\" \"Germany/Xetra\"                  #> [31] \"Germany/Eurex\"                  \"Germany/Euwax\"                  #> [33] \"HongKong\"                       \"Hungary\"                        #> [35] \"Iceland\"                        \"India\"                          #> [37] \"Indonesia\"                      \"Israel\"                         #> [39] \"Italy\"                          \"Italy/Exchange\"                 #> [41] \"Japan\"                          \"Mexico\"                         #> [43] \"NewZealand\"                     \"Norway\"                         #> [45] \"Null\"                           \"Poland\"                         #> [47] \"Romania\"                        \"Russia\"                         #> [49] \"SaudiArabia\"                    \"Singapore\"                      #> [51] \"Slovakia\"                       \"SouthAfrica\"                    #> [53] \"SouthKorea\"                     \"SouthKorea/KRX\"                 #> [55] \"Sweden\"                         \"Switzerland\"                    #> [57] \"Taiwan\"                         \"Thailand\"                       #> [59] \"Turkey\"                         \"Ukraine\"                        #> [61] \"UnitedKingdom\"                  \"UnitedKingdom/Exchange\"         #> [63] \"UnitedKingdom/Metals\"           \"WeekendsOnly\"                    # July 4 is a US holiday, but not a UK holiday bizday_of_period(\"2024-07-05\", \"UnitedStates\", period = \"month\") #> [1] 4 bizday_of_period(\"2024-07-05\", \"UnitedKingdom\", period = \"month\") #> [1] 5  library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  tibble(   date = seq(as.Date(\"2025-05-29\"), as.Date(\"2025-06-03\"), by = \"day\"), ) |>   mutate(     day_of_week = weekdays(date),     adjusted_date = adjust_to_bizday(date, \"UnitedStates\"),     bizday_of_month = bizday_of_period(adjusted_date, \"UnitedStates\", period = \"month\"),     bizday_of_year = bizday_of_period(adjusted_date, \"UnitedStates\", period = \"year\")   ) #> # A tibble: 6 × 5 #>   date       day_of_week adjusted_date bizday_of_month bizday_of_year #>   <date>     <chr>       <date>                  <dbl>          <dbl> #> 1 2025-05-29 Thursday    2025-05-29                 20            103 #> 2 2025-05-30 Friday      2025-05-30                 21            104 #> 3 2025-05-31 Saturday    2025-06-02                  1            105 #> 4 2025-06-01 Sunday      2025-06-02                  1            105 #> 5 2025-06-02 Monday      2025-06-02                  1            105 #> 6 2025-06-03 Tuesday     2025-06-03                  2            106"},{"path":"https://mcaselli.github.io/mcrutils/reference/bizdays_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Business Days Between Two Dates in a Given QuantLib Calendar — bizdays_between","title":"Calculate Business Days Between Two Dates in a Given QuantLib Calendar — bizdays_between","text":"Wrapper around qlcal::businessDaysBetween() allows use specified calendar without making persistent changes calendar use globally.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/bizdays_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Business Days Between Two Dates in a Given QuantLib Calendar — bizdays_between","text":"","code":"bizdays_between(from, to, calendar, include_first = TRUE, include_last = TRUE)"},{"path":"https://mcaselli.github.io/mcrutils/reference/bizdays_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Business Days Between Two Dates in a Given QuantLib Calendar — bizdays_between","text":", start end dates. Date object something coercible .Date(). calendar (character) QuantLib calendar id (vector qlcal::calendars lists valid options). include_first, include_last (logical) Whether include first last dates count. Defaults TRUE.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/bizdays_between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Business Days Between Two Dates in a Given QuantLib Calendar — bizdays_between","text":"integer representing number business days two dates, according specified calendar.","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/reference/bizdays_between.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Business Days Between Two Dates in a Given QuantLib Calendar — bizdays_between","text":"","code":"bizdays_between(\"2025-07-01\", \"2025-07-15\", \"UnitedStates\") #> [1] 10 bizdays_between(\"2025-07-01\", \"2025-07-15\", \"UnitedKingdom\") #> [1] 11"},{"path":"https://mcaselli.github.io/mcrutils/reference/breaks_quarters.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate quarterly, semester, or year breaks for dates — breaks_quarters","title":"Generate quarterly, semester, or year breaks for dates — breaks_quarters","text":"function generates breaks quarterly, semester, yearly intervals, either fixed-width mode automatic mode.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/breaks_quarters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate quarterly, semester, or year breaks for dates — breaks_quarters","text":"","code":"breaks_quarters(n = 9, width = NULL)"},{"path":"https://mcaselli.github.io/mcrutils/reference/breaks_quarters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate quarterly, semester, or year breaks for dates — breaks_quarters","text":"n number breaks generate automatic mode. width fixed width breaks fixed-width mode. specification form \"n unit\", n number unit one \"month\", \"quarter\", \"year\" (optionally plural). example, \"3 months\", \"1 quarter\", \"2 years\". unit months, value must 3, 6 12 (get quarters). unit quarters, value must 1, 2, 4 (get quarters, semesters, years). unit years, value must 1. @note function never create breaks longer one year. desired, probably better sticking standard ggplot approach scale_x_date(date_breaks = \"5 years\", date_labels = \"%y\").","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/breaks_quarters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate quarterly, semester, or year breaks for dates — breaks_quarters","text":"function takes vector dates returns vector dates use breaks","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_quarter_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate quarterly breaks for dates — calc_quarter_breaks","title":"Calculate quarterly breaks for dates — calc_quarter_breaks","text":"function calculates quarterly breaks given range dates.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_quarter_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate quarterly breaks for dates — calc_quarter_breaks","text":"","code":"calc_quarter_breaks(dates)"},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_quarter_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate quarterly breaks for dates — calc_quarter_breaks","text":"dates vector dates, something coercible base::.Date","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_quarter_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate quarterly breaks for dates — calc_quarter_breaks","text":"vector dates representing start quarter within range dates.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_quarter_breaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate quarterly breaks for dates — calc_quarter_breaks","text":"breaks floor dates quarter, min(dates) >= min(calc_quarter_breaks(dates)) max(dates) <= max(calc_quarter_breaks(dates)).","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_semester_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate semester breaks for dates — calc_semester_breaks","title":"Calculate semester breaks for dates — calc_semester_breaks","text":"function calculates semester breaks given range dates.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_semester_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate semester breaks for dates — calc_semester_breaks","text":"","code":"calc_semester_breaks(dates)"},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_semester_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate semester breaks for dates — calc_semester_breaks","text":"dates vector dates, something coercible base::.Date","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_semester_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate semester breaks for dates — calc_semester_breaks","text":"vector dates representing start semester within range dates.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_semester_breaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate semester breaks for dates — calc_semester_breaks","text":"breaks floor dates semester, min(dates) >= min(calc_semester_breaks(dates)) max(dates) <= max(calc_quarter_breaks(dates)).","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_year_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate yearly breaks for dates — calc_year_breaks","title":"Calculate yearly breaks for dates — calc_year_breaks","text":"function calculates yearly breaks given range dates.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_year_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate yearly breaks for dates — calc_year_breaks","text":"","code":"calc_year_breaks(dates)"},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_year_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate yearly breaks for dates — calc_year_breaks","text":"dates vector dates, something coercible base::.Date","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_year_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate yearly breaks for dates — calc_year_breaks","text":"vector dates representing start year within range dates.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/calc_year_breaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate yearly breaks for dates — calc_year_breaks","text":"breaks floor dates year, min(dates) >= min(calc_year_breaks(dates)) max(dates) <= max(calc_yearr_breaks(dates)).","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/detect_hidden_logicals.html","id":null,"dir":"Reference","previous_headings":"","what":"Find columns containing logical values stored as character or factor — detect_hidden_logicals","title":"Find columns containing logical values stored as character or factor — detect_hidden_logicals","text":"Find columns containing logical values stored character factor","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/detect_hidden_logicals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find columns containing logical values stored as character or factor — detect_hidden_logicals","text":"","code":"detect_hidden_logicals(data)"},{"path":"https://mcaselli.github.io/mcrutils/reference/detect_hidden_logicals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find columns containing logical values stored as character or factor — detect_hidden_logicals","text":"data data frame tibble","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/detect_hidden_logicals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find columns containing logical values stored as character or factor — detect_hidden_logicals","text":"character vector column names found hold exclusively logical data (NA) typed character factor.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/detect_hidden_logicals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find columns containing logical values stored as character or factor — detect_hidden_logicals","text":"Columns deemed hold logical data contain values c(\"T\", \"TRUE\", \"True\", \"true\", \"F\", \"FALSE\", \"False\", \"false\", NA). (matching base::.logical())","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/example_sales.html","id":null,"dir":"Reference","previous_headings":"","what":"Example sales data — example_sales","title":"Example sales data — example_sales","text":"dataset containing example sales data time period \"2022-01-01\" \"2024-12-20\". fictitious data created demonstration purposes, includes several cohorts customers–persistent, join leave various times.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/example_sales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example sales data — example_sales","text":"","code":"example_sales"},{"path":"https://mcaselli.github.io/mcrutils/reference/example_sales.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example sales data — example_sales","text":"data frame 5300 rows 2 variables: account_id Character. unique identifier customer placed order. market Character. market order placed; either \"United States\" \"Germany\" order_date Date. date order. units_ordered Integer. number units ordered order.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/example_sales.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example sales data — example_sales","text":"Generated using random sampling demonstration purposes.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/guess_col_fmts.html","id":null,"dir":"Reference","previous_headings":"","what":"Guesses appropriate format class for each numeric column in a data frame — guess_col_fmts","title":"Guesses appropriate format class for each numeric column in a data frame — guess_col_fmts","text":"Using column names, function classifies numeric columns three classes: percentage, currency, numeric. uses presence specific flags column names determine class column. Numeric columns whose names contain pct_flags curr_flags classified numeric.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/guess_col_fmts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guesses appropriate format class for each numeric column in a data frame — guess_col_fmts","text":"","code":"guess_col_fmts(   data,   pct_flags = c(\"frac\", \"pct\", \"percent\"),   curr_flags = c(\"revenue\", \"asp\", \"cogs\") )"},{"path":"https://mcaselli.github.io/mcrutils/reference/guess_col_fmts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guesses appropriate format class for each numeric column in a data frame — guess_col_fmts","text":"data data frame pct_flags character vector flags identify percentage columns curr_flags character vector flags identify currency columns","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/guess_col_fmts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guesses appropriate format class for each numeric column in a data frame — guess_col_fmts","text":"list three character vectors: numeric, pct, currency, names columns class","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/is_bizday.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Date is a Business Day in a Given Calendar — is_bizday","title":"Check if Date is a Business Day in a Given Calendar — is_bizday","text":"function checks provided date(s) business days according specified QuantLib calendar.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/is_bizday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Date is a Business Day in a Given Calendar — is_bizday","text":"","code":"is_bizday(date, calendar)"},{"path":"https://mcaselli.github.io/mcrutils/reference/is_bizday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Date is a Business Day in a Given Calendar — is_bizday","text":"date vector dates (Date object coercible .Date()). calendar (character) QuantLib calendar id (vector qlcal::calendars lists valid options).","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/is_bizday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Date is a Business Day in a Given Calendar — is_bizday","text":"logical vector indicating whether date business day specified calendar.","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/reference/is_bizday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Date is a Business Day in a Given Calendar — is_bizday","text":"","code":"# valid calendars qlcal::calendars #>  [1] \"TARGET\"                         \"UnitedStates\"                   #>  [3] \"UnitedStates/LiborImpact\"       \"UnitedStates/NYSE\"              #>  [5] \"UnitedStates/GovernmentBond\"    \"UnitedStates/NERC\"              #>  [7] \"UnitedStates/FederalReserve\"    \"UnitedStates/SOFR\"              #>  [9] \"Argentina\"                      \"Australia\"                      #> [11] \"Australia/ASX\"                  \"Austria\"                        #> [13] \"Austria/Exchange\"               \"Bespoke\"                        #> [15] \"Botswana\"                       \"Brazil\"                         #> [17] \"Brazil/Exchange\"                \"Canada\"                         #> [19] \"Canada/TSX\"                     \"Chile\"                          #> [21] \"China\"                          \"China/IB\"                       #> [23] \"CzechRepublic\"                  \"Denmark\"                        #> [25] \"Finland\"                        \"France\"                         #> [27] \"France/Exchange\"                \"Germany\"                        #> [29] \"Germany/FrankfurtStockExchange\" \"Germany/Xetra\"                  #> [31] \"Germany/Eurex\"                  \"Germany/Euwax\"                  #> [33] \"HongKong\"                       \"Hungary\"                        #> [35] \"Iceland\"                        \"India\"                          #> [37] \"Indonesia\"                      \"Israel\"                         #> [39] \"Italy\"                          \"Italy/Exchange\"                 #> [41] \"Japan\"                          \"Mexico\"                         #> [43] \"NewZealand\"                     \"Norway\"                         #> [45] \"Null\"                           \"Poland\"                         #> [47] \"Romania\"                        \"Russia\"                         #> [49] \"SaudiArabia\"                    \"Singapore\"                      #> [51] \"Slovakia\"                       \"SouthAfrica\"                    #> [53] \"SouthKorea\"                     \"SouthKorea/KRX\"                 #> [55] \"Sweden\"                         \"Switzerland\"                    #> [57] \"Taiwan\"                         \"Thailand\"                       #> [59] \"Turkey\"                         \"Ukraine\"                        #> [61] \"UnitedKingdom\"                  \"UnitedKingdom/Exchange\"         #> [63] \"UnitedKingdom/Metals\"           \"WeekendsOnly\"                   # July 4, 2024 is a US holiday, but not a UK holiday is_bizday(c(\"2024-07-04\", \"2024-07-05\"), \"UnitedStates\") #> [1] FALSE  TRUE is_bizday(c(\"2024-07-04\", \"2024-07-05\"), \"UnitedKingdom\") #> [1] TRUE TRUE"},{"path":"https://mcaselli.github.io/mcrutils/reference/is_ytd_comparable.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a date comparable for year-to-date (YTD) calculations? — is_ytd_comparable","title":"Is a date comparable for year-to-date (YTD) calculations? — is_ytd_comparable","text":"month day date  end_date? Useful creating YTD comparisons using historical data.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/is_ytd_comparable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a date comparable for year-to-date (YTD) calculations? — is_ytd_comparable","text":"","code":"is_ytd_comparable(date, end_date)"},{"path":"https://mcaselli.github.io/mcrutils/reference/is_ytd_comparable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a date comparable for year-to-date (YTD) calculations? — is_ytd_comparable","text":"date date object. (coercible using lubridate::as_date()) end_date reference end-date compare . (.e. YTD end date) (coercible using lubridate::as_date())","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/is_ytd_comparable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a date comparable for year-to-date (YTD) calculations? — is_ytd_comparable","text":"TRUE month day date end_date, FALSE otherwise.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/is_ytd_comparable.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Is a date comparable for year-to-date (YTD) calculations? — is_ytd_comparable","text":"datetimes coerced dates, time component ignored.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/is_ytd_comparable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a date comparable for year-to-date (YTD) calculations? — is_ytd_comparable","text":"","code":"is_ytd_comparable(\"2023-05-04\", \"2024-05-31\") #> [1] TRUE"},{"path":"https://mcaselli.github.io/mcrutils/reference/label_quarters_short.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate labels for quarters with year — label_quarters_short","title":"Generate labels for quarters with year — label_quarters_short","text":"function generates labels quarters short format, showing quarter year changes previous label, similar scales::label_date_short().","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/label_quarters_short.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate labels for quarters with year — label_quarters_short","text":"","code":"label_quarters_short()"},{"path":"https://mcaselli.github.io/mcrutils/reference/label_quarters_short.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate labels for quarters with year — label_quarters_short","text":"function takes vector dates returns labels format \"Qx\\nYYYY\" \"Qn\"","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/label_quarters_short.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate labels for quarters with year — label_quarters_short","text":"generally used conjunction breaks dates start quarter, e.g. breaks_quarters().","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/mcrutils-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mcrutils: Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting — mcrutils-package","title":"mcrutils: Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting — mcrutils-package","text":"Convenience functions data cleaning, analysis reporting, including creating visualizing year--date quarterly analyses, determining customer account status customer churn analysis.","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/reference/mcrutils-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mcrutils: Miscellaneous Utilities for Data Cleaning, Analysis, and Reporting — mcrutils-package","text":"Maintainer: Michael Caselli mkc.develops@gmail.com","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/normalize_logicals.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize character or factor columns containing logical data to logical type — normalize_logicals","title":"Normalize character or factor columns containing logical data to logical type — normalize_logicals","text":"Normalize character factor columns containing logical data logical type","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/normalize_logicals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize character or factor columns containing logical data to logical type — normalize_logicals","text":"","code":"normalize_logicals(data, quiet = FALSE)"},{"path":"https://mcaselli.github.io/mcrutils/reference/normalize_logicals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize character or factor columns containing logical data to logical type — normalize_logicals","text":"data data frame tibble quiet TRUE, suppresses messages columns converted","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/normalize_logicals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize character or factor columns containing logical data to logical type — normalize_logicals","text":"data frame tibble specified columns converted logical type","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/normalize_logicals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize character or factor columns containing logical data to logical type — normalize_logicals","text":"uses detect_hidden_logicals() find columns character factor contain logical values. Converts columns logical type using base::.logical().","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/periodic_bizdays.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Number of Business Days in Months, Quarters, etc — periodic_bizdays","title":"Calculate the Number of Business Days in Months, Quarters, etc — periodic_bizdays","text":"function calculates number business days periodic interval (e.g., month, quarter) two dates, using specified QuantLib calendars holiday definitions.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/periodic_bizdays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Number of Business Days in Months, Quarters, etc — periodic_bizdays","text":"","code":"periodic_bizdays(from, to, by = \"month\", quantlib_calendars = \"UnitedStates\")"},{"path":"https://mcaselli.github.io/mcrutils/reference/periodic_bizdays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Number of Business Days in Months, Quarters, etc — periodic_bizdays","text":", start end dates. Date object something coercible .Date(). periodicity, passed seq.Date() (e.g., \"month\", \"quarter\", \"year\"). See seq.Date() options. quantlib_calendars (character) vector QuantLib calendar ids (vector qlcal::calendars lists valid options).","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/periodic_bizdays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Number of Business Days in Months, Quarters, etc — periodic_bizdays","text":"tibble columns: calendar QuantLib calendar used start start date period end end date period business_days number business days period, according calendar","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/periodic_bizdays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Number of Business Days in Months, Quarters, etc — periodic_bizdays","text":"","code":"periodic_bizdays(   from = as.Date(\"2023-01-01\"),   to = as.Date(\"2023-12-31\"),   by = \"month\",   quantlib_calendars = c(\"UnitedStates\", \"UnitedKingdom\") ) #> # A tibble: 24 × 4 #>    calendar     start      end        business_days #>    <chr>        <date>     <date>             <int> #>  1 UnitedStates 2023-01-01 2023-01-31            20 #>  2 UnitedStates 2023-02-01 2023-02-28            19 #>  3 UnitedStates 2023-03-01 2023-03-31            23 #>  4 UnitedStates 2023-04-01 2023-04-30            20 #>  5 UnitedStates 2023-05-01 2023-05-31            22 #>  6 UnitedStates 2023-06-01 2023-06-30            21 #>  7 UnitedStates 2023-07-01 2023-07-31            20 #>  8 UnitedStates 2023-08-01 2023-08-31            23 #>  9 UnitedStates 2023-09-01 2023-09-30            20 #> 10 UnitedStates 2023-10-01 2023-10-31            21 #> # ℹ 14 more rows"},{"path":"https://mcaselli.github.io/mcrutils/reference/plot_accounts_by_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Count of Accounts by Status Over Time — plot_accounts_by_status","title":"Plot Count of Accounts by Status Over Time — plot_accounts_by_status","text":"function generates line plot visualizing counts accounts status time. uses accounts_by_status() function categorize accounts creates plot using ggplot2.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/plot_accounts_by_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Count of Accounts by Status Over Time — plot_accounts_by_status","text":"","code":"plot_accounts_by_status(   data,   account_id,   order_date,   by = \"month\",   lost = c(\"detailed\", \"simple\"),   force_final_period_complete = FALSE,   include_cumulative = TRUE )"},{"path":"https://mcaselli.github.io/mcrutils/reference/plot_accounts_by_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Count of Accounts by Status Over Time — plot_accounts_by_status","text":"data data frame tibble order information containing least account IDs order dates account_id, order_date <data-masked> columns data corresponding account identifier order dates, erspectively time period resolution. Defaults \"month\", anything supported unit argument lubridate::floor_date seq.Date option, e.g. \"week\", \"quarter\", \"2 months\" etc. lost either \"detailed\" \"simple\", \"detailed\", terminally lost temporarily lost accounts shown separately, \"simple\", combined single lost category. Defaults \"detailed\". force_final_period_complete Logical, TRUE, treat final period complete even may . forces final period displayed solid lines, even period includes dates greater final order_date data. include_cumulative Logical, TRUE, include cumulative account counts plot. Defaults TRUE.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/plot_accounts_by_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Count of Accounts by Status Over Time — plot_accounts_by_status","text":"ggplot2 object: line plot count accounts status time (active, new, returning, temporarily lost, terminally lost, regained, optionally cumulative).  force_final_period_complete FALSE, final period displayed dashed line period includes dates greater final order_date data.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/plot_accounts_by_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Count of Accounts by Status Over Time — plot_accounts_by_status","text":"","code":"example_sales |>   plot_accounts_by_status(account_id, order_date, by = \"quarter\")"},{"path":"https://mcaselli.github.io/mcrutils/reference/py_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate previous year dates — py_dates","title":"Calculate previous year dates — py_dates","text":"Calculates previous year dates subtracting one year given dates.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/py_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate previous year dates — py_dates","text":"","code":"py_dates(dates, ...)"},{"path":"https://mcaselli.github.io/mcrutils/reference/py_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate previous year dates — py_dates","text":"dates date-time object class POSIXlt, POSIXct Date. ... Arguments passed lubridate::add_with_rollback roll_to_first rollback first day month instead last day previous month (passed rollback()) preserve_hms retains hour, minute, second information? FALSE, new date 00:00:00 (passed rollback())","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/py_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate previous year dates — py_dates","text":"vector dates one year prior input dates. fictitious resulting dates (e.g. result subtracting year leap day) rolled back prior valid date.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/set_cal.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the QuantLib Calendar — set_cal","title":"Set the QuantLib Calendar — set_cal","text":"functions wrap qlcal::setCalendar(). validate provided calendar valid QuantLib calendar, change calendar case validated id different current calendar. set_calendar() changes global calendar R session. invisibly returns ID previously active calendar. with_calendar() local_calendar() allow temporarily set QuantLib calendar duration expression evaluation context. behave like with_*() local_*() functions withr","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/set_cal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the QuantLib Calendar — set_cal","text":"","code":"set_calendar(calendar)  with_calendar(new, code)  local_calendar(new = list(), .local_envir = parent.frame())"},{"path":"https://mcaselli.github.io/mcrutils/reference/set_cal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the QuantLib Calendar — set_cal","text":"calendar, new (character) single QuantLib calendar id (vector qlcal::calendars lists valid options). code Code execute temporary environment .local_envir (environment) environment use scoping","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/set_cal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the QuantLib Calendar — set_cal","text":"set_calendar() returns invisibly ID previously active calendar. functions error invalid calendar id provided.","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/reference/set_cal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the QuantLib Calendar — set_cal","text":"","code":"library(qlcal) isBusinessDay(as.Date(\"2024-07-04\")) # Default calendar #> [1] TRUE with_calendar(\"UnitedStates\", {   # Code here will use the \"UnitedStates\" calendar   isBusinessDay(as.Date(\"2024-07-04\")) }) #> [1] FALSE isBusinessDay(as.Date(\"2024-07-04\")) # Back to default calendar #> [1] TRUE"},{"path":"https://mcaselli.github.io/mcrutils/reference/ytd_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the start and end dates of the year-to-date period — ytd_bounds","title":"Find the start and end dates of the year-to-date period — ytd_bounds","text":"Calculates start end dates year--date period based maximum date provided dates. partial- full-month methods supported, see rollback_partial_month.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/ytd_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the start and end dates of the year-to-date period — ytd_bounds","text":"","code":"ytd_bounds(dates, rollback_partial_month = FALSE)"},{"path":"https://mcaselli.github.io/mcrutils/reference/ytd_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the start and end dates of the year-to-date period — ytd_bounds","text":"dates vector dates, something coercible lubridate::as_date() rollback_partial_month TRUE, maximum date dates end--month date, end date rolled back last day previous month. FALSE end date maximum date dates.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/ytd_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the start and end dates of the year-to-date period — ytd_bounds","text":"vector containing start end dates year--date period.","code":""},{"path":"https://mcaselli.github.io/mcrutils/reference/ytd_bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the start and end dates of the year-to-date period — ytd_bounds","text":"","code":"ytd_bounds(c(\"2023-02-04\", \"2024-02-02\", \"2024-02-14\")) #> [1] \"2024-01-01\" \"2024-02-14\"  ytd_bounds(   c(\"2023-12-04\", \"2024-02-14\"),   rollback_partial_month = TRUE ) #> [1] \"2024-01-01\" \"2024-01-31\""},{"path":[]},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/news/index.html","id":"new-0-0-0-9008","dir":"Changelog","previous_headings":"","what":"New","title":"mcrutils 0.0.0.9008","text":"bizday_of_period() compute business day date within given period (e.g. date xxx 3rd business day month according UnitedStates QuantLib calendar) is_bizday(), bizdays_between() wrap similar qlcal functions, allow evaluation specified QuantLib calendar without making persistent changes globally configured calendar. with_calendar() local_calendar() facilitate temporary changes configured qlcal QuantLib calendar ’la with_*() local_*() functions withr package. set_calendar() changes globally configured qlcal QuantLib calendar, specified calendar valid different currently configured calendar.","code":""},{"path":"https://mcaselli.github.io/mcrutils/news/index.html","id":"changed-0-0-0-9008","dir":"Changelog","previous_headings":"","what":"Changed","title":"mcrutils 0.0.0.9008","text":"(internal) removed bizdays dependency, now using qlcal business day functions","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/news/index.html","id":"new-0-0-0-9007","dir":"Changelog","previous_headings":"","what":"New","title":"mcrutils 0.0.0.9007","text":"periodic_bizdays() function calculate business days two dates specified periodicity (e.g., weekly, monthly), using RQuantLib calendars holiday definitions. convenience wrapper around bizdays::bizdays()","code":""},{"path":[]},{"path":"https://mcaselli.github.io/mcrutils/news/index.html","id":"new-0-0-0-9006","dir":"Changelog","previous_headings":"","what":"New","title":"mcrutils 0.0.0.9006","text":"plot_accounts_by_status() can now display lost accounts two ways. Default behavior lost = \"detailed\" shows temporarily_lost termially_lost separately (prior versions), lost = \"simple\" combines single lost category.","code":""},{"path":"https://mcaselli.github.io/mcrutils/news/index.html","id":"changed-0-0-0-9006","dir":"Changelog","previous_headings":"","what":"Changed","title":"mcrutils 0.0.0.9006","text":"auto_dt() now includes copy download buttons default. Set buttons = FALSE suppress","code":""}]
